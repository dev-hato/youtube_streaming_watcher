---
name: docker-push

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  docker-push:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      # jscpd:ignore-start
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'push' }}
      - run: echo "REPOSITORY=${{github.repository}}" >> "$GITHUB_ENV"
      # jscpd:ignore-end
      - run: cp .env.example .env
      - run: cat .env >> "$GITHUB_ENV"
      - name: Build and push (main)
        uses: docker/bake-action@v2.0.0
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: docker-compose.yml

  update-version:
    runs-on: ubuntu-latest
    needs: docker-push
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get Dependabot Node.js version
        id: get_dependabot_node_version
        run: |
          DOCKER_CMD="node --version && npm --version"
          mapfile -t result < <(docker run ghcr.io/dependabot/dependabot-core sh -c "${DOCKER_CMD}")
          node_version="${result[0]//v/}"
          npm_version=${result[1]}
          echo "Node.js version:" "${node_version}"
          echo "npm version:" "${npm_version}"
          echo "::set-output name=node_version::${node_version}"
          echo "::set-output name=npm_version::${npm_version}"
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
      - run: echo "REPOSITORY=${{github.repository}}" >> "$GITHUB_ENV"
      - run: cp .env.example .env
      - run: cat .env >> "$GITHUB_ENV"
      - run: docker compose pull
        env:
          DOCKER_CONTENT_TRUST: 1
      - name: Get Node.js version
        id: get_node_version
        env:
          DOCKER_CONTENT_TRUST: 1
        run: |
          DOCKER_CMD="node --version"
          mapfile -t result < <(docker compose run notify sh -c "${DOCKER_CMD}")
          node_version="${result[0]//v/}"
          echo "Node.js version:" "${node_version}"
          echo "::set-output name=node_version::${node_version}"
      - name: Update versions
        run: |
          DEPENDABOT_NODE_VERSION="${{steps.get_dependabot_node_version.outputs.node_version}}"
          DEPENDABOT_NPM_VERSION="${{steps.get_dependabot_node_version.outputs.npm_version}}"
          NODE_VERSION="${{steps.get_node_version.outputs.node_version}}"
          echo "${NODE_VERSION}" > .node-version

          NODE_PATTERN="s/\"node\": \".*\"/\"node\": \"^${DEPENDABOT_NODE_VERSION}"

          if [ "${DEPENDABOT_NODE_VERSION}" != "${NODE_VERSION}" ]
          then
            NODE_PATTERN+=" || ^${NODE_VERSION}"
          fi

          NODE_PATTERN+="\"/g"
          sed -i -e "${NODE_PATTERN}" package.json

          NPM_PATTERN_PACKAGE="s/\"npm\": \".*\"/\"npm\": \"^${DEPENDABOT_NPM_VERSION}\"/g"
          sed -i -e "${NPM_PATTERN_PACKAGE}" package.json

          NPM_PATTERN_DOCKER="s/npm@[0-9.]*/npm@${DEPENDABOT_NPM_VERSION}/g"
          sed -i -e "${NPM_PATTERN_DOCKER}" Dockerfile
      - uses: actions/setup-node@v3.3.0
        with:
          node-version-file: .node-version
          cache: npm
          cache-dependency-path: package-lock.json
      - run: |
          DEPENDABOT_NPM_VERSION="${{steps.get_dependabot_node_version.outputs.npm_version}}"
          npm install --prefer-offline -g "npm@${DEPENDABOT_NPM_VERSION}"
          npm install
      # 差分があったときは差分を出力する
      - name: Show diff
        id: diff
        run: |
          result=$(git diff)
          echo "::set-output name=result::$result"
      - run: |
          REPO_NAME="${{ github.event.pull_request.head.repo.full_name }}"
          echo "REPO_NAME=${REPO_NAME}" >> "${GITHUB_ENV}"
      # 差分があったときは、コミットを作りpushする
      - name: Push
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != '' }}
        run: |
          git config user.name "github-actions[bot]"
          EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          git config user.email "${EMAIL}"
          git add -u
          git commit -m "update node"
          REPO_URL="https://"
          REPO_URL+="${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/"
          REPO_URL+="${{github.repository}}.git"
          GITHUB_HEAD="HEAD:refs/heads/fix-version-${HEAD_REF}"
          git push -f "${REPO_URL}" "${GITHUB_HEAD}"
      - name: Set org name
        uses: actions/github-script@v6
        if: env.REPO_NAME == github.repository
        id: set_org_name
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: return process.env.GITHUB_REPOSITORY.split('/')[0]
      - name: Get PullRequests
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != '' }}
        id: get_pull_requests
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const pulls_list_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "${{steps.set_org_name.outputs.result}}:fix-version-" + HEAD_REF,
              base: HEAD_REF,
              state: "open"
            }
            console.log("call pulls.list:", pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list,
                                                pulls_list_params)
            return pulls.length
      # pushしたブランチでPRを作る
      - name: Create PullRequest
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != ''
          && steps.get_pull_requests.outputs.result == 0 }}
        id: create_pull_request
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const number = "#${{github.event.pull_request.number}}"
            let title = "nodeアップデート "
            title += number
            const pulls_create_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "${{steps.set_org_name.outputs.result}}:fix-version-" + HEAD_REF,
              base: HEAD_REF,
              title,
              body: number + " のnodeをアップデートします。"
            }
            console.log("call pulls.create:", pulls_create_params)
            const create_pull_res = await github.rest.pulls.create(
                                      pulls_create_params
                                    )
            return create_pull_res.data.number
      - name: Assign a user
        uses: actions/github-script@v6
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result != ''
          && steps.get_pull_requests.outputs.result == 0
          && github.event.pull_request.user.login != 'dependabot[bot]' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issues_add_assignees_params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{steps.create_pull_request.outputs.result}},
              assignees: ["${{github.event.pull_request.user.login}}"]
            }
            console.log("call issues.addAssignees:")
            console.log(issues_add_assignees_params)
            await github.rest.issues.addAssignees(issues_add_assignees_params)
      # 既にformat修正のPRがある状態で、手動でformatを修正した場合、format修正のPRを閉じる
      - name: Close PullRequest
        uses: actions/github-script@v6
        env:
          HEAD_REF: ${{github.event.pull_request.head.ref}}
        if: ${{ env.REPO_NAME == github.repository
          && steps.diff.outputs.result == '' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const HEAD_REF = process.env["HEAD_REF"]
            const head_name = "fix-version-" + HEAD_REF
            const common_params = {
              owner: context.repo.owner,
              repo: context.repo.repo
            }
            const pulls_list_params = {
              head: "${{steps.set_org_name.outputs.result}}:" + head_name,
              base: HEAD_REF,
              state: "open",
              ...common_params
            }
            console.log("call pulls.list:", pulls_list_params)
            const pulls = await github.paginate(github.rest.pulls.list,
                                                pulls_list_params)

            for (const pull of pulls) {
              const pulls_update_params = {
                pull_number: pull.number,
                state: "closed",
                ...common_params
              }
              console.log("call pulls.update:", pulls_update_params)
              await github.rest.pulls.update(pulls_update_params)
              const git_deleteRef_params = {
                ref: "heads/" + head_name,
                ...common_params
              }
              console.log("call git.deleteRef:", git_deleteRef_params)
              await github.rest.git.deleteRef(git_deleteRef_params)
            }
      - name: Exit
        if: ${{ steps.diff.outputs.result != '' }}
        run: exit 1

  dockle:
    runs-on: ubuntu-latest
    needs: docker-push
    env:
      DOCKER_CONTENT_TRUST: 1
    steps:
      - uses: actions/checkout@v3
      - run: cp .env.example .env
      - run: cat .env >> "$GITHUB_ENV"
      # jscpd:ignore-start
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo 'TAG_NAME=latest' >> "$GITHUB_ENV"
        if: ${{ github.event_name == 'push' }}
      - run: echo "REPOSITORY=${{github.repository}}" >> "$GITHUB_ENV"
      # jscpd:ignore-end
      - run: |
          VERSION=$(
            curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
            grep '"tag_name":' | \
            sed -E 's/.*"v([^"]+)".*/\1/' \
          )
          curl -L -o dockle.deb "https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.deb"
          sudo dpkg -i dockle.deb
      - run: docker compose pull
      - run: docker compose up -d
      - run: |
          for image_name in $(docker compose images | awk 'OFS=":" {print $2,$3}' | tail -n +2); do
            cmd="dockle --exit-code 1 --ak AWS_ACCESS_KEY_ID --ak AWS_SECRET_ACCESS_KEY "

            if [[ "${image_name}" =~ "db" ]]; then
              cmd+="-i CIS-DI-0009 "
            elif [[ "${image_name}" =~ "reply" ]] || [[ "${image_name}" =~ "notify" ]]; then
              cmd+="-i DKL-LI-0003 "
            fi

            cmd+="${image_name}"
            echo "> ${cmd}"
            eval "${cmd}"
          done
