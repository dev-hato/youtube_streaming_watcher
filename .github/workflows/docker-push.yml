---
name: docker-push

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  update-node:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get @types/node version
        uses: actions/github-script@v6.1.0
        id: get_types_node_version
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const package = require('./package.json')

            const version = package.devDependencies['@types/node'].split('.')
            return [version[0], version[1]].join('.')
      - uses: actions/setup-node@v3.4.0
        with:
          node-version: ${{ steps.get_types_node_version.outputs.result }}
      - uses: actions/setup-node@v3.4.0
        with:
          node-version-file: .node-version
          cache: npm
      - run: |
          npm_version=$(jq -r '.engines.npm | ltrimstr("^")' package.json)
          npm install --prefer-offline --location=global "npm@${npm_version}"
          npm ci --prefer-offline
      - uses: actions/github-script@v6.1.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const yaml = require('js-yaml')

            const config_filename = '.github/dependabot.yml'
            const config = yaml.load(fs.readFileSync(config_filename, 'utf8'))

            for (const update of config.updates) {
              if (update['package-ecosystem'] === 'docker') {
                for (const ignore of update.ignore) {
                  if (ignore['dependency-name'] === 'node') {
                    ignore.versions[0] = '>${{ steps.get_types_node_version.outputs.result }}'
                  }
                }
              }
            }

            try {
              fs.writeFileSync(config_filename, "---\n" + yaml.dump(config), 'utf8')
            } catch (err) {
              console.error(err.message)
              process.exit(1)
            }
      - uses: actions/github-script@v6.1.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')

            const renovate = require('./renovate.json')

            for (const rule of renovate.packageRules) {
              if (rule.matchPackageNames.includes('node')) {
                rule.allowedVersions = '<=${{ steps.get_types_node_version.outputs.result }}'
              }
            }

            try {
              fs.writeFileSync('./renovate.json', JSON.stringify(renovate, null, "  ") + "\n", 'utf8')
            } catch (err) {
              console.error(err.message)
              process.exit(1)
            }
      - name: Get Node.js version
        id: get_node_version
        run: echo "::set-output name=node_version::$(node --version | sed -e 's/v//g')"
      - run: sed -i -e "s/\(FROM node:\)[0-9.]*\(-.*\)/\1${{steps.get_node_version.outputs.node_version}}\2/g" Dockerfile
      - uses: dev-hato/actions-diff-pr-management@v0.0.10
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          branch-name-prefix: update-node
          pr-title-prefix: nodeをアップデートしてあげたよ！
          repo-name: ${{ github.event.pull_request.head.repo.full_name }}

  docker-push:
    runs-on: ubuntu-latest
    needs: update-node
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      # jscpd:ignore-start
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo "REPOSITORY=${{github.repository}}" >> "$GITHUB_ENV"
      # jscpd:ignore-end
      - run: cp .env.example .env
      - run: cat .env >> "$GITHUB_ENV"
      - name: Build and push (main)
        uses: docker/bake-action@v2.2.0
        env:
          DOCKER_CONTENT_TRUST: 1
        with:
          push: true
          files: docker-compose.yml

  update-version:
    runs-on: ubuntu-latest
    needs: docker-push
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get Dependabot Node.js version
        id: get_dependabot_node_version
        run: |
          DOCKER_CMD="node --version && npm --version"
          mapfile -t result < <(docker run ghcr.io/dependabot/dependabot-core sh -c "${DOCKER_CMD}")
          node_version="${result[0]//v/}"
          npm_version=${result[1]}
          echo "Node.js version:" "${node_version}"
          echo "npm version:" "${npm_version}"
          echo "::set-output name=node_version::${node_version}"
          echo "::set-output name=npm_version::${npm_version}"
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: github.event_name == 'pull_request'
      - run: echo "REPOSITORY=${{github.repository}}" >> "$GITHUB_ENV"
      - run: cp .env.example .env
      - run: cat .env >> "$GITHUB_ENV"
      - run: docker compose pull
        env:
          DOCKER_CONTENT_TRUST: 1
      - name: Get Node.js version
        id: get_node_version
        env:
          DOCKER_CONTENT_TRUST: 1
        run: |
          DOCKER_CMD="node --version"
          mapfile -t result < <(docker compose run notify sh -c "${DOCKER_CMD}")
          node_version="${result[0]//v/}"
          echo "Node.js version:" "${node_version}"
          echo "::set-output name=node_version::${node_version}"
      - name: Update versions
        run: |
          DEPENDABOT_NODE_VERSION="${{steps.get_dependabot_node_version.outputs.node_version}}"
          DEPENDABOT_NPM_VERSION="${{steps.get_dependabot_node_version.outputs.npm_version}}"
          NODE_VERSION="${{steps.get_node_version.outputs.node_version}}"
          echo "${NODE_VERSION}" > .node-version

          NODE_PATTERN="s/\"node\": \".*\"/\"node\": \"^${DEPENDABOT_NODE_VERSION}"

          if [ "${DEPENDABOT_NODE_VERSION}" != "${NODE_VERSION}" ]
          then
            NODE_PATTERN+=" || ^${NODE_VERSION}"
          fi

          NODE_PATTERN+="\"/g"
          sed -i -e "${NODE_PATTERN}" package.json

          NPM_PATTERN_PACKAGE="s/\"npm\": \".*\"/\"npm\": \"^${DEPENDABOT_NPM_VERSION}\"/g"
          sed -i -e "${NPM_PATTERN_PACKAGE}" package.json

          NPM_PATTERN_DOCKER="s/npm@[0-9.]*/npm@${DEPENDABOT_NPM_VERSION}/g"
          sed -i -e "${NPM_PATTERN_DOCKER}" Dockerfile
      - uses: actions/setup-node@v3.4.1
        with:
          node-version-file: .node-version
          cache: npm
          cache-dependency-path: package-lock.json
      - run: |
          DEPENDABOT_NPM_VERSION="${{steps.get_dependabot_node_version.outputs.npm_version}}"
          npm install --prefer-offline --location=global "npm@${DEPENDABOT_NPM_VERSION}"
          npm install
      - uses: dev-hato/actions-diff-pr-management@v0.0.10
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          branch-name-prefix: fix-version
          pr-title-prefix: nodeをアップデートしてあげたよ！
          repo-name: ${{ github.event.pull_request.head.repo.full_name }}

  update-dockle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get latest dockle version
        uses: actions/github-script@v6.1.0
        id: get_latest_dockle_version
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: 'goodwithtech',
              repo: 'dockle'
            });
            return release.data.tag_name.replace('v', '');
      - run: echo '${{ steps.get_latest_dockle_version.outputs.result }}' > .dockle-version
      - uses: dev-hato/actions-diff-pr-management@main
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          branch-name-prefix: update-dockle
          pr-title-prefix: Dockleをアップデートしてあげたよ！
          repo-name: ${{ github.event.pull_request.head.repo.full_name }}

  dockle:
    runs-on: ubuntu-latest
    needs:
      - update-dockle
      - docker-push
    env:
      DOCKER_CONTENT_TRUST: 1
    steps:
      - uses: actions/checkout@v3.0.2
      - run: cp .env.example .env
      - run: cat .env >> "$GITHUB_ENV"
      # jscpd:ignore-start
      - run: echo "TAG_NAME=${HEAD_REF//\//-}" >> "$GITHUB_ENV"
        env:
          HEAD_REF: ${{github.head_ref}}
        if: ${{ github.event_name == 'pull_request' }}
      - run: echo "REPOSITORY=${{github.repository}}" >> "$GITHUB_ENV"
      # jscpd:ignore-end
      - run: |
          dockle_version="$(cat .dockle-version)"
          curl -L -o dockle.deb "https://github.com/goodwithtech/dockle/releases/download/v${dockle_version}/dockle_${dockle_version}_Linux-64bit.deb"
          sudo dpkg -i dockle.deb
      - run: docker compose pull
      - run: docker compose up -d
      - run: |
          for image_name in $(docker compose images | awk 'OFS=":" {print $2,$3}' | tail -n +2); do
            cmd="dockle --exit-code 1 --ak AWS_ACCESS_KEY_ID --ak AWS_SECRET_ACCESS_KEY "

            if [[ "${image_name}" =~ "db" ]]; then
              cmd+="-i CIS-DI-0009 "
            elif [[ "${image_name}" =~ "reply" ]] || [[ "${image_name}" =~ "notify" ]]; then
              cmd+="-i DKL-LI-0003 "
            fi

            cmd+="${image_name}"
            echo "> ${cmd}"
            eval "${cmd}"
          done

  docker-push-complete:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - update-version
      - dockle
    steps:
      - if: needs.update-version.result == 'success' && needs.dockle.result == 'success'
        run: exit 0
      - if: needs.update-version.result != 'success' || needs.dockle.result != 'success'
        run: exit 1
